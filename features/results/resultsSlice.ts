import { createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit";
import { ResultsThunk, RootResultsState } from "../../app/store";
import { fetchTariffs } from "./resultsAPI";

export type ResultsStateStatus = "idle" | "loading" | "failed";

export interface ResultsState {
  tariffs: number[];
  status: ResultsStateStatus;
}

const initialState: ResultsState = {
  tariffs: [],
  status: "idle",
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const getTariffsAsync = createAsyncThunk(
  "results/getTariffsAsync",
  async () => {
    const response = await fetchTariffs();
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const resultsSlice = createSlice({
  name: "results",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setLoadingState: (state, action: PayloadAction<ResultsStateStatus>) => {
      state.status = action.payload;
    },
    addTariff: (state, action: PayloadAction<number>) => {
      state.tariffs.push(action.payload);
    },
    // Redux Toolkit allows us to write "mutating" logic in reducers. It
    // doesn't actually mutate the state because it uses the Immer library,
    // which detects changes to a "draft state" and produces a brand new
    // immutable state based off those changes
    // Use the PayloadAction type to declare the contents of `action.payload`
    setTariffs: (state, action: PayloadAction<number[]>) => {
      state.tariffs = action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getTariffsAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(getTariffsAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.tariffs = action.payload;
      })
      .addCase(getTariffsAsync.rejected, (state) => {
        state.status = "failed";
        state.tariffs = [];
      });
  },
});

export const { addTariff, setTariffs, setLoadingState } = resultsSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectTariffs = (state: RootResultsState) => state.results.tariffs;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
export const getTariffsAsyncVersion2 =
  (): ResultsThunk => async (dispatch, getState) => {
    try {
      dispatch(setLoadingState("loading"));
      const { data: tariffs } = await fetchTariffs();
      dispatch(setTariffs(tariffs));
      dispatch(setLoadingState("idle"));
    } catch (e) {
      dispatch(setLoadingState("failed"));
    }
  };

export default resultsSlice.reducer;
